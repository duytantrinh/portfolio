/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 public/models/avatar.glb -o src/components/Avatar.jsx -k -r public 
*/

import React, {useEffect, useRef, useState} from "react"
import {useFrame, useGraph} from "@react-three/fiber"
import {useAnimations, useFBX, useGLTF, useScroll} from "@react-three/drei"
import {SkeletonUtils} from "three-stdlib"

import * as THREE from "three"
import useMobile from "../hooks/useMobile"

export function Avatar(props) {
  const {isMobile} = useMobile()

  const {scene} = useGLTF("/models/avatar.glb")
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene])
  const {nodes, materials} = useGraph(clone)

  // Start: LOAD ANIMATION FOR AVATAR
  const group = useRef()

  const {animations: idleAnimation} = useFBX("/animations/Idle.fbx")
  const {animations: walkingAnimation} = useFBX("/animations/Walking.fbx")
  idleAnimation[0].name = "Idle"
  walkingAnimation[0].name = "Walking"
  // console.log(walkingAnimation)

  // gọi sử dụng animation
  const {actions} = useAnimations(
    [idleAnimation[0], walkingAnimation[0]],
    group
  )

  const [animation, setAnimation] = useState("Idle")
  useEffect(() => {
    actions[animation].reset().fadeIn(0.5).play()

    return () => actions[animation].fadeOut(0.5)
  }, [animation])

  // for scrolling
  const scrollData = useScroll()
  const lastScroll = useRef(0) // last value of sections

  useFrame(() => {
    const scrollDelta = scrollData.offset - lastScroll.current
    let rotationTarget = 0
    // scrolling => avatar walking
    if (Math.abs(scrollDelta) > 0.00001) {
      setAnimation("Walking")
      // Scrolling forward -> walking forward OR to RIGHT on Mobile
      if (scrollDelta > 0) {
        rotationTarget = isMobile ? Math.PI / 2 : 0
      } else {
        // Scrolling backward -> walking backward OR to LEFT on Mobile
        rotationTarget = isMobile ? -Math.PI / 2 : Math.PI
      }
    } else {
      setAnimation("Idle")
    }

    // for smoother rotation forward and backward
    group.current.rotation.y = THREE.MathUtils.lerp(
      group.current.rotation.y,
      rotationTarget,
      0.1
    )
    lastScroll.current = scrollData.offset
  })

  return (
    <group {...props} dispose={null} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="Wolf3D_Glasses"
        geometry={nodes.Wolf3D_Glasses.geometry}
        material={materials.Wolf3D_Glasses}
        skeleton={nodes.Wolf3D_Glasses.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Headwear"
        geometry={nodes.Wolf3D_Headwear.geometry}
        material={materials.Wolf3D_Headwear}
        skeleton={nodes.Wolf3D_Headwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Body"
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Bottom"
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Footwear"
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        name="Wolf3D_Outfit_Top"
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
    </group>
  )
}

useGLTF.preload("/models/avatar.glb")
